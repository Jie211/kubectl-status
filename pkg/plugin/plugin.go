//go:generate statik -src templates/
package plugin

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	_ "unsafe" // required for using go:linkname in the file

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	"k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/runtime"
	utilerrors "k8s.io/apimachinery/pkg/util/errors"
	"k8s.io/cli-runtime/pkg/resource"
	"k8s.io/client-go/kubernetes"
	_ "k8s.io/client-go/plugin/pkg/client/auth" // Initialize all known client auth plugins.
	cmdutil "k8s.io/kubectl/pkg/cmd/util"
	kyaml "sigs.k8s.io/yaml"

	_ "github.com/bergerx/kubectl-status/pkg/plugin/statik" // generated by statik
)

type IngressBackendIssue struct {
	IssueType string
	Backend   v1beta1.IngressBackend
}

//go:linkname signame runtime.signame
func signame(sig uint32) string

func RunPlugin(f cmdutil.Factory, cmd *cobra.Command, args []string) error {
	filenames := cmdutil.GetFlagStringSlice(cmd, "filename")
	if cmdutil.GetFlagBool(cmd, "test") {
		return runAgainstFile(filenames)
	}
	return runAgainstCluster(f, cmd, args, filenames)
}

func getResources(f cmdutil.Factory, cmd *cobra.Command, args []string, filenames []string) ([]*resource.Info, error) {
	clientConfig := f.ToRawKubeConfigLoader()
	allNamespaces := cmdutil.GetFlagBool(cmd, "all-namespaces")
	namespace, enforceNamespace, err := clientConfig.Namespace()
	if err != nil {
		return nil, errors.WithMessage(err, "Failed getting namespace")
	}
	r := f.NewBuilder().
		Unstructured().
		NamespaceParam(namespace).DefaultNamespace().AllNamespaces(allNamespaces).
		FilenameParam(enforceNamespace, &resource.FilenameOptions{Filenames: filenames}).
		LabelSelectorParam(cmdutil.GetFlagString(cmd, "selector")).
		FieldSelectorParam(cmdutil.GetFlagString(cmd, "field-selector")).
		ResourceTypeOrNameArgs(true, args...).
		ContinueOnError().
		Latest().
		Flatten().
		Do()
	err = r.Err()
	if err != nil {
		return nil, errors.WithMessage(err, "Failed during querying of resources")
	}
	resourceInfos, err := r.Infos()
	if err != nil {
		return nil, err
	}
	if len(resourceInfos) == 0 {
		if !allNamespaces && namespace != "" {
			fmt.Printf("No resources found in %s namespace\n", namespace)
		} else {
			fmt.Printf("No resources found.\n")
		}
	}
	return resourceInfos, nil
}

func runAgainstFile(filenames []string) error {
	if len(filenames) != 1 {
		return errors.New("when using --test, exactly one --filename must be provided")
	}
	filename := filenames[0]
	out, err := renderFile(filename)
	if err != nil {
		return err
	}
	fmt.Println(out)
	return nil
}

func runAgainstCluster(f cmdutil.Factory, cmd *cobra.Command, args []string, filenames []string) error {
	clientSet, _ := f.KubernetesClientSet()
	resourceInfos, err := getResources(f, cmd, args, filenames)
	if err != nil {
		return err
	}
	var allRenderErrs []error
	for _, resourceInfo := range resourceInfos {
		err := renderResource(f, resourceInfo, clientSet)
		if err != nil {
			allRenderErrs = append(allRenderErrs, err)
		}
	}
	return utilerrors.NewAggregate(allRenderErrs)
}

func renderFile(manifestFilename string) (string, error) {
	var out map[string]interface{}
	manifestFile, _ := ioutil.ReadFile(manifestFilename)
	err := kyaml.Unmarshal(manifestFile, &out)
	if err != nil {
		return "", errors.WithMessage(err, "Failed getting JSON for object")
	}
	var output bytes.Buffer
	err = renderTemplateForMap(&output, out)
	if err != nil {
		return "", err
	}
	return output.String(), nil
}

func renderResource(f cmdutil.Factory, resourceInfo *resource.Info, clientSet *kubernetes.Clientset) error {
	var err error
	obj := resourceInfo.Object
	objKind := resourceInfo.ResourceMapping().GroupVersionKind.Kind
	out, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&obj)
	if err != nil {
		return err
	}
	err = includeEvents(obj, clientSet, out)
	if err != nil {
		return err
	}
	kindInjectFuncMap := map[string][]func(obj runtime.Object, f cmdutil.Factory, out map[string]interface{}) error{
		"Node":        {includeNodeMetrics, includeNodeLease, includePodDetailsOnNode, includeNodeStatsSummary},
		"Pod":         {includePodMetrics}, // kubectl get --raw /api/v1/nodes/minikube/proxy/stats/summary --> .pods[] | select podRef | containers[] | select name
		"Service":     {includeEndpoint},
		"StatefulSet": {includeStatefulSetDiff},
		"Ingress":     {includeIngressServices},
	}
	for kind, funcs := range kindInjectFuncMap {
		if objKind == kind {
			for _, fu := range funcs {
				err = fu(obj, f, out)
				if err != nil {
					return err
				}
			}
		}
	}

	err = renderTemplateForMap(os.Stdout, out)
	if err != nil {
		return err
	}
	// Add a newline at the end of every template
	fmt.Println("")
	return nil
}
