//go:generate statik -src templates -include *.tmpl
package plugin

import (
	"fmt"
	"io/ioutil"
	"os"
	_ "unsafe" // required for using go:linkname in the file

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/klog/v2"
	kyaml "sigs.k8s.io/yaml"

	_ "github.com/bergerx/kubectl-status/pkg/plugin/statik" // generated by statik
)

//go:linkname signame runtime.signame
func signame(sig uint32) string

func Run(o *Options, args []string) error {
	engine, err := newRenderEngine(*o)
	if err != nil {
		klog.V(2).ErrorS(err, "Error creating engine")
		return err
	}
	klog.V(5).InfoS("Created engine", "engine", engine)
	if o.RenderOptions.Local {
		filenames := o.ResourceBuilderFlags.FileNameFlags.Filenames
		err := runLocal(filenames, engine)
		return err
	}
	return runRemote(args, engine)
}

func runRemote(args []string, engine *renderEngine) error {
	resourceInfos, err := engine.getQueriedResources(args)
	if err != nil {
		klog.V(1).ErrorS(err, "Error querying resources")
		return err
	}
	resourceCount := len(resourceInfos)
	klog.V(5).InfoS("Found matching resources", "count", resourceCount)
	for i, resourceInfo := range resourceInfos {
		fmt.Printf("\n")
		item := fmt.Sprintf("%d/%d", i+1, resourceCount)
		klog.V(5).InfoS("Processing resource", "item", item, "resource", resourceInfo)
		obj := resourceInfo.Object
		out, err := runtime.DefaultUnstructuredConverter.ToUnstructured(obj)
		if err != nil {
			klog.V(0).ErrorS(err, "Failed to decode a resource", "resource", resourceInfo)
			continue
		}
		r := newRenderableObject(out, *engine)
		err = r.render(os.Stdout)
		if err != nil {
			klog.V(0).ErrorS(err, "Failed to render a resource", "resource", resourceInfo)
			continue
		}
		fmt.Printf("\n")
	}
	return nil
}

func runLocal(filenames *[]string, engine *renderEngine) error {
	for _, filename := range *filenames {
		klog.V(5).InfoS("Processing local file", "filename", filename)
		out, err := kyamlUnmarshalFile(filename)
		if err != nil {
			klog.V(0).ErrorS(err, "Error unmarshalling the file", "filename", filename)
		}
		r := newRenderableObject(out, *engine)
		r.engine.RenderOptions.Shallow = true
		output, err := r.renderString()
		fmt.Println(output)
		if err != nil {
			klog.V(0).ErrorS(err, "Error processing file", "filename", filename)
		}
	}
	return nil
}

func kyamlUnmarshalFile(manifestFilename string) (out map[string]interface{}, err error) {
	manifestFile, _ := ioutil.ReadFile(manifestFilename)
	err = kyaml.Unmarshal(manifestFile, &out)
	return
}
