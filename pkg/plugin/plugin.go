//go:generate statik -src templates/
package plugin

import (
	"encoding/json"
	"fmt"
	"os"
	_ "unsafe" // required for using go:linkname in the file

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	"k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/runtime"
	utilerrors "k8s.io/apimachinery/pkg/util/errors"
	"k8s.io/cli-runtime/pkg/resource"
	_ "k8s.io/client-go/plugin/pkg/client/auth" // Initialize all known client auth plugins.
	cmdutil "k8s.io/kubectl/pkg/cmd/util"
	kyaml "sigs.k8s.io/yaml"

	_ "github.com/bergerx/kubectl-status/pkg/plugin/statik" // generated by statik
)

type IngressBackendIssue struct {
	IssueType string
	Backend   v1beta1.IngressBackend
}

//go:linkname signame runtime.signame
func signame(sig uint32) string

func RunPlugin(f cmdutil.Factory, cmd *cobra.Command, args []string) error {
	clientSet, _ := f.KubernetesClientSet()
	clientConfig := f.ToRawKubeConfigLoader()
	allNamespaces := cmdutil.GetFlagBool(cmd, "all-namespaces")
	namespace, enforceNamespace, err := clientConfig.Namespace()
	if err != nil {
		return errors.WithMessage(err, "Failed getting namespace")
	}
	filenames := cmdutil.GetFlagStringSlice(cmd, "filename")
	isTest := cmdutil.GetFlagBool(cmd, "test")
	if isTest {
		if len(filenames) != 1 {
			return errors.New("when using --test, exactly one --filename must be provided")
		}
		filename := filenames[0]
		out, err := renderFile(filename)
		if err != nil {
			return err
		}
		fmt.Println(out)
		return nil
	}

	r := f.NewBuilder().
		Unstructured().
		NamespaceParam(namespace).DefaultNamespace().AllNamespaces(allNamespaces).
		FilenameParam(enforceNamespace, &resource.FilenameOptions{Filenames: filenames}).
		LabelSelectorParam(cmdutil.GetFlagString(cmd, "selector")).
		FieldSelectorParam(cmdutil.GetFlagString(cmd, "field-selector")).
		ResourceTypeOrNameArgs(true, args...).
		ContinueOnError().
		Latest().
		Flatten().
		Do()

	err = r.Err()
	if err != nil {
		return errors.WithMessage(err, "Failed during querying of resources")
	}

	var allErrs []error
	infos, err := r.Infos()
	if err != nil {
		allErrs = append(allErrs, err)
	}
	if len(infos) == 0 {
		if !allNamespaces && namespace != "" {
			fmt.Printf("No resources found in %s namespace\n", namespace)
		} else {
			fmt.Printf("No resources found.\n")
		}
	}
	for _, info := range infos {
		var err error
		obj := info.Object
		objKind := info.ResourceMapping().GroupVersionKind.Kind
		out, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&obj)
		if err != nil {
			allErrs = append(allErrs, err)
			continue
		}
		err = includeEvents(obj, clientSet, out)
		if err != nil {
			allErrs = append(allErrs, err)
			continue
		}
		kindInjectFuncMap := map[string][]func(obj runtime.Object, f cmdutil.Factory, out map[string]interface{}) error{
			"Node":        {includeNodeMetrics, includeNodeLease, includePodDetailsOnNode, includeNodeStatsSummary},
			"Pod":         {includePodMetrics}, // kubectl get --raw /api/v1/nodes/minikube/proxy/stats/summary --> .pods[] | select podRef | containers[] | select name
			"Service":     {includeEndpoint},
			"StatefulSet": {includeStatefulSetDiff},
			"Ingress":     {includeIngressServices},
		}
		for kind, funcs := range kindInjectFuncMap {
			if objKind == kind {
				for _, fu := range funcs {
					err = fu(obj, f, out)
					if err != nil {
						allErrs = append(allErrs, err)
						continue
					}
				}
				if objKind == "Node" {
					x, _ := json.Marshal(out)
					y, _ := kyaml.JSONToYAML(x)
					_ = y
					//fmt.Println(string(y))
				}
			}
		}

		err = renderTemplateForMap(os.Stdout, out)
		if err != nil {
			allErrs = append(allErrs, err)
			continue
		}
		// Add a newline at the end of every template
		fmt.Println("")
	}
	return utilerrors.NewAggregate(allErrs)
}
