{{- define "DefaultResource" }}
    {{- template "status_summary_line" . }}
    {{- template "observed_generation_summary" . }}
    {{- template "replicas_status" . }}
    {{- template "conditions_summary" .status.conditions }}
    {{- template "events" .events }}
{{- end }}

{{- define "Pod" }}
    {{- template "status_summary_line" . }}
    {{- with .status.qosClass }} {{ . | colorKeyword }}{{ end }}
    {{- with .status.message }}, message: {{ . }}{{ end }}
    {{- template "pod_conditions_summary" .status.conditions }}
    {{- with .status.initContainerStatuses }}
  InitContainers:
        {{- range . }}
            {{- template "container_status_summary" . }}
        {{- end }}
    {{- end }}
    {{- with .status.containerStatuses }}
  Containers:
        {{- range . }}
            {{- template "container_status_summary" . }}
        {{- end }}
    {{- end }}
    {{- template "events" .events }}
{{- end }}

{{- define "StatefulSet" }}
    {{- template "status_summary_line" . }}
    {{- template "observed_generation_summary" . }}
    {{- /* Where there is no readyReplicas, STS doesn't have that fields at all,
           and apparantly the numbers are parsed as float 64, so used 0.0 rather then 0 */ -}}
    {{- $injectedStatus := .status }}
    {{- if not (hasKey .status "readyReplicas") }}
        {{- $injectedStatus := set $injectedStatus "readyReplicas" 0.0 }}
    {{- end }}
    {{- if not (hasKey .status "currentReplicas") }}
        {{- $injectedStatus := set $injectedStatus "currentReplicas" 0.0 }}
    {{- end}}
    {{- $injectedManifest := set . "status" $injectedStatus }}
    {{- template "replicas_status" $injectedManifest }}
    {{- template "conditions_summary" .status.conditions }}
    {{- if eq .status.currentRevision .status.updateRevision }}
        {{- if eq $injectedStatus.readyReplicas 0.0 }}
  {{ "Stuck rollout" | red }}: No ready replicas, this StatefulSet won't likely go further.
        {{- end }}
    {{- else }}
  {{"Ongoing rollout" | yellow | bold }}: {{ .status.currentRevision }} -> {{ .status.updateRevision }}
    {{- end }}
    {{- template "events" .events }}
{{- end }}

{{- define "DaemonSet" }}
    {{- template "status_summary_line" . }}
    {{- template "observed_generation_summary" . }}
    {{- template "daemonset_replicas_status" . }}
    {{- template "conditions_summary" .status.conditions }}
    {{- template "events" .events }}
{{- end -}}

{{- define "PersistentVolume" }}
    {{- template "status_summary_line" . }}
    {{- with .status.message }}{{/* exists on failure */}}
  {{ "message" | red | bold }}: {{ . }}
    {{- end }}
    {{- template "events" .events }}
{{- end -}}

{{- define "PersistentVolumeClaim" }}
    {{- template "status_summary_line" . }}
    {{- with .status.capacity.storage }} {{ . }}{{ end }}
    {{- template "events" .events }}
{{- end -}}

{{- define "ComponentStatus" }}
    {{- template "status_summary_line" . }}
    {{- template "conditions_summary" .conditions }}
    {{- template "events" .events }}
{{- end -}}

{{- define "CronJob" }}
    {{- template "status_summary_line" . }}, last ran at {{ .status.lastScheduleTime }} ({{ .status.lastScheduleTime | colorAgo }} ago)
    {{- template "events" .events }}
{{- end -}}

{{- define "Job" }}
    {{- template "status_summary_line" . }}
    {{- /* See https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#parallel-jobs */ -}}
    {{- if eq (coalesce .spec.completions .spec.parallelism 1 | toString) "1" }}
        {{- template "job_non_parallel" . }}
    {{- else if .spec.completions }}
        {{- /* TODO: handle "fixed completion count jobs" better */ -}}
        {{- template "job_parallel" . }}
    {{- else if .spec.parallelism }}
        {{- /* TODO: handle "work queue jobs" better */ -}}
        {{- template "job_parallel" . }}
    {{- end }}
    {{- template "conditions_summary" .status.conditions }}
    {{- template "events" .events }}
{{- end -}}

{{- define "job_non_parallel" }}
    {{- if .status.succeeded }}, {{ "Succeeded" | green }}{{ end }}
    {{- if .status.failed }}, {{ "Failed" | red | bold }}{{ end }}
{{- end -}}

{{- define "job_parallel" }}
    TODO: handle parallel jobs  better
    {{- if .status.failed }}, {{ "failed" | red | bold }} {{ .status.failed }}/{{ .spec.backoffLimit }} times{{ end }}
{{- end -}}

{{- define "Service" }}
    {{- template "status_summary_line" . }}
    {{- if eq .spec.type "LoadBalancer" }}
        {{- template "load_balancer_ingress" . }}
    {{- end }}
    {{- template "events" .events }}
{{- end -}}

{{- define "Ingress" }}
    {{- template "status_summary_line" . }}
    {{- template "load_balancer_ingress" . }}
    {{- template "events" .events }}
{{- end -}}

{{- define "HorizontalPodAutoscaler" }}
    {{- template "status_summary_line" . }} last scale was {{ .status.lastScaleTime | colorAgo }} ago
  {{ "current" | bold }} replicas:{{ .status.currentReplicas }}/({{ .spec.minReplicas | default "1" }}-{{ .spec.maxReplicas }})
    {{- if .status.currentCPUUtilizationPercentage }} CPUUtilisation: {{ .status.currentCPUUtilizationPercentage | toString | redIf (ge .status.currentCPUUtilizationPercentage .spec.targetCPUUtilizationPercentage) }}%/{{ .spec.targetCPUUtilizationPercentage }}%{{ end }}
    {{- if (ne .status.currentReplicas .status.desiredReplicas) }}, {{ "desired" | red | bold}}: {{ .status.currentReplicas }} --> {{ .status.desiredReplicas }}{{ end }}
    {{- template "events" .events }}
{{- end -}}

{{- define "ResourceQuota" }}
    {{- template "status_summary_line" . }}
    {{- $hard := .status.hard }}
    {{- range $key, $value := .status.used }}
  {{ $key }}: {{ $value }}/{{ index $hard $key }}
    {{- end }}
    {{- template "events" .events }}
{{- end -}}

{{- define "load_balancer_ingress" }}
    {{- if .status.loadBalancer.ingress }}
        {{- if or (index .status.loadBalancer.ingress 0).hostname (index .status.loadBalancer.ingress 0).ip }}
            {{- with (index .status.loadBalancer.ingress 0).hostname }} {{ "LoadBalancer" | green }}:{{ . }}{{ end }}
            {{- with (index .status.loadBalancer.ingress 0).ip }} {{ "LoadBalancer" | green }}:{{ . }}{{ end }}
        {{- else }} {{ "Pending LoadBalancer" | red | bold }}
        {{- end }}
    {{- end }}
{{- end -}}

{{- define "daemonset_replicas_status" }}
    {{- if .status.desiredNumberScheduled }}{{ $desiredNumberScheduled := .status.desiredNumberScheduled }}
  {{ "desired" | bold}}:{{ .status.desiredNumberScheduled }}
        {{- if hasKey .status "currentNumberScheduled" }}, current:{{ .status.currentNumberScheduled | toString | redIf (not ( eq $desiredNumberScheduled .status.currentNumberScheduled )) }}{{ end }}
        {{- if hasKey .status "numberAvailable" }}, available:{{ .status.numberAvailable | toString | redIf (not ( eq $desiredNumberScheduled .status.numberAvailable)) }}{{ end }}
        {{- if hasKey .status "numberReady" }}, ready:{{ .status.numberReady | toString | redIf (not ( eq $desiredNumberScheduled .status.numberReady )) }}{{ end }}
        {{- if hasKey .status "updatedNumberScheduled" }}, updated:{{ .status.updatedNumberScheduled | toString | redIf (not ( eq $desiredNumberScheduled .status.updatedNumberScheduled )) }}{{ end }}
        {{- with .status.numberMisscheduled }}{{ "numberMisscheduled" | red | bold }}:{{ . }}{{- end }}
    {{- end }}
{{- end -}}

{{- define "replicas_status" }}
    {{- if .status.replicas }}{{ $spec_replicas := .spec.replicas }}
  {{ "desired" | bold }}:{{ .spec.replicas }}
        {{- with .status.replicas }}, existing:{{ . | toString | redIf (not ( eq $spec_replicas . )) }}{{ end }}
        {{- if hasKey .status "readyReplicas" }}, ready:{{ .status.readyReplicas | toString | redIf (not ( eq $spec_replicas .status.readyReplicas )) }}{{ end }}
        {{- if hasKey .status "currentReplicas" }}, current:{{ .status.currentReplicas | toString | redIf (not ( eq $spec_replicas .status.currentReplicas )) }}{{ end }}
        {{- if hasKey .status "updatedReplicas" }}, updated:{{ .status.updatedReplicas | toString | redIf (not ( eq $spec_replicas .status.updatedReplicas )) }}{{ end }}
        {{- if hasKey .status "availableReplicas" }}, available:{{ .status.availableReplicas | toString | redIf (not ( eq $spec_replicas .status.availableReplicas )) }}{{ end }}
        {{- if hasKey .status "fullyLabeledReplicas" }}, fullyLabeled:{{ .status.fullyLabeledReplicas | toString | redIf (not ( eq $spec_replicas .status.fullyLabeledReplicas )) }}{{ end }}
        {{- with .status.unavailableReplicas }}, unavailable:{{ . | toString | red | bold }}{{ end }}
        {{- with .status.collisionCount }}, collisions:{{ .status.collisionCount | toString | red | bold }}{{ end }}
  {{- end }}
{{- end -}}

{{- define "status_summary_line" }}
{{.kind | cyan | bold }}/{{ .metadata.name | cyan }}
    {{- with .metadata.namespace }} -n {{ . }}{{ end }}
    {{- with .metadata.creationTimestamp }}, created {{ . | colorAgo }} ago{{ end }}
    {{- with .metadata.generation }}, gen:{{ . }}{{ end }}
    {{- if .status.startTime }}
        {{- $created := .metadata.creationTimestamp | toDate "2006-01-02T15:04:05Z" }}
        {{- $started := .status.startTime | toDate "2006-01-02T15:04:05Z" }}
        {{- $startedIn := $started.Sub $created}}
        {{- if gt ($startedIn.Seconds | int) 0 }}, started after {{ $startedIn.Seconds | ago }}{{ end }}
    {{- end }}
    {{- if .status.completionTime }}
        {{- $started := .status.startTime | toDate "2006-01-02T15:04:05Z" -}}
        {{- $completed := .status.completionTime | toDate "2006-01-02T15:04:05Z" -}}
        {{- $ranfor := $completed.Sub $started }} and {{ "completed" | green }} in {{ $ranfor | colorDuration }}
    {{- end }}
    {{- with .status.phase }} {{ . | colorKeyword }}{{ end }}
    {{- /* .status.state is used by e.g. Ambassador */ -}}
    {{- with .status.state }} {{ . | colorKeyword }}{{ end }}
    {{- with .status.reason }} {{ . | colorKeyword }}{{ end }}
{{- end -}}

{{- define "observed_generation_summary" }}
    {{- if and .metadata.generation .status.observedGeneration }}
        {{- if ne .metadata.generation .status.observedGeneration }}
  observedGeneration({{ .status.observedGeneration | red | bold }}) doesn't match generation({{ .metadata.generation | red | bold }})
    {{ "This usually means related controller has not yet reconciled this resource!" | yellow }}
        {{- end }}
    {{- end }}
{{- end -}}

{{- define "pod_conditions_summary" }}
  {{ "" }} {{- /* To have the newline and two spaces */ -}}
    {{- $podScheduledCondition := getPodCondition . "PodScheduled" }}
    {{- $readyCondition := getPodCondition . "Ready" }}
    {{- if (isPodConditionHealthy $podScheduledCondition) }}
        {{- "PodScheduled" | bold }}
    {{- else }}
        {{- "Not PodScheduled" | red | bold }}
    {{- end }}
    {{- " -> "}}
    {{- $initializedCondition := getPodCondition . "Initialized" }}
    {{- if (isPodConditionHealthy $initializedCondition) }}
        {{- "Initialized" | bold }}
    {{- else }}
        {{- "Not Initialized" | red | bold }}
    {{- end }}
    {{- " -> "}}
    {{- $containersReadyCondition := getPodCondition . "ContainersReady" }}
    {{- if (isPodConditionHealthy $containersReadyCondition) }}
        {{- "ContainersReady" | bold }}
    {{- else }}
        {{- "Not ContainersReady" | red | bold }}
    {{- end }}
    {{- " -> "}}
    {{- if (isPodConditionHealthy $readyCondition) }}
        {{- template "condition_summary" $readyCondition }}
    {{- else }}
        {{- "Not Ready" | red | bold }}
    {{- end }}
    {{- range . }}
        {{- /* show details for only unhealthy conditions */ -}}
        {{- if (not (isPodConditionHealthy .)) }}
    {{ template "condition_summary" . }}
        {{- end }}
    {{- end }}
{{- end -}}

{{- define "conditions_summary" }}
    {{- if . }}
        {{- range . }}
  {{ template "condition_summary" . }}
        {{- end }}
    {{- end }}
{{- end -}}

{{- define "condition_summary" }}
    {{- $condition := . }}
    {{- if (not (isPodConditionHealthy .)) }}
        {{- printf "Not %s" .type | red | bold }}:
    {{- else}}
        {{- .type | bold }}:
    {{- end }}
    {{- with .reason }} {{ . | redIf (not (isPodConditionHealthy $condition)) }}{{ end }}
    {{- with .message }}, {{ . | redIf (not (isPodConditionHealthy $condition)) }}{{ end }}
    {{- with .lastTransitionTime }} for {{ . | colorAgo }}{{ end }}
    {{- if .lastUpdateTime }}
        {{- if ne (.lastUpdateTime | colorAgo) (.lastTransitionTime | colorAgo) -}}
            , last update was {{ .lastUpdateTime | colorAgo }} ago
        {{- end }}
    {{- end }}
    {{- if .lastProbeTime}}
        {{- if ne (.lastProbeTime | colorAgo) (.lastTransitionTime | colorAgo) -}}
            , last probe was {{ .lastProbeTime | colorAgo }} ago
        {{- end }}
    {{- end }}
{{- end -}}

{{- define "container_status_summary"}}
    {{ .name | bold }} ({{ .image | markYellow "latest" }}) {{ template "container_state_summary" .state }}
    {{- if .state.running }}{{ if .ready }} and {{ "Ready" | green }}{{ else }} but {{ "Not Ready" | red | bold }}{{ end }}{{ end }}
    {{- if gt (.restartCount | int ) 0 }}, {{ printf "restarted %d times" (.restartCount | int) | yellow | bold }}{{ end }}
    {{- with .lastState }}
      previously: {{ template "container_state_summary" . }}
    {{- end }}
{{- end -}}

{{- define "container_state_summary" }}
    {{- /* https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status */}}
    {{- with .waiting }}
        {{- "Waiting" | red | bold }} {{ .reason | red | bold }}{{ with .message }}: {{ . | red | bold }}{{ end }}
    {{- end }}
    {{- with .running }}
        {{- "Running" | green }} for {{ .startedAt | colorAgo }}
    {{- end }}
    {{- with .terminated }}
        {{- if .startedAt }}
            {{- $started := .startedAt | toDate "2006-01-02T15:04:05Z" -}}
            {{- $finished := .finishedAt | toDate "2006-01-02T15:04:05Z" -}}
            {{- $ranfor := $finished.Sub $started -}}
        Started {{ .startedAt | colorAgo }} ago and {{ if .reason }}{{ .reason | colorKeyword }}{{ else }}terminated{{ end }} after {{ $ranfor | colorDuration }}
            {{- if .exitCode }} with exit code {{ template "exit_code_summary" . }}{{ end }}
        {{- else }}
            {{ template "exit_code_summary" . }}
        {{- end }}
    {{- end }}
{{- end -}}

{{- define "exit_code_summary" }}
    {{- .exitCode | toString | redIf (ne (.exitCode | toString) "0" ) }}
    {{- with .signal }} (signal: {{ . }}){{ end }}
    {{- if and (gt (.exitCode | int) 128) (le (.exitCode | int) 165) }} ({{ sub (.exitCode | int) 128 | signalName }}) {{ end }}
{{- end -}}

{{- define "events" }}
    {{- if .items }}
  Events:
        {{- range .items }}
    {{ "" }} {{- /* To have the newline and two spaces */ -}}
            {{- if eq .type "Warning" }}{{ .reason | red | bold }} {{ else }}{{ .reason }} {{ end }}
            {{- .lastTimestamp | colorAgo }} ago {{ "" }}
            {{- if gt (.count | int) 1 -}}
                (x{{ .count }} over {{ .firstTimestamp | colorAgo }}) {{ "" }}
            {{- end -}}
            from {{ list .reportingComponent .reportingInstance .source.component .source.host .source.fieldPath | compact | join "," | bold }}: {{ .message }}
        {{- end }}
    {{- end }}
{{- end -}}

{{- define "Node" }}
    {{- template "status_summary_line" . }}
  {{ .status.nodeInfo.operatingSystem | bold }} {{ .status.nodeInfo.osImage }} ({{ .status.nodeInfo.architecture }}), kernel {{ .status.nodeInfo.kernelVersion }}, kubelet {{ .status.nodeInfo.kubeletVersion }}, kube-proxy {{ .status.nodeInfo.kubeProxyVersion }}
  cpu: {{ .status.allocatable.cpu }}, mem: {{ .status.allocatable.memory }} mem, ephemeral-storage: {{index .status.allocatable "ephemeral-storage"}}
    {{- if or (index .metadata.labels "node.kubernetes.io/instance") (index .metadata.labels "topology.kubernetes.io/region") (index .metadata.labels "failure-domain.beta.kubernetes.io/region") (index .metadata.labels "topology.kubernetes.io/zone") (index .metadata.labels "failure-domain.beta.kubernetes.io/region") }}
  {{ "cloudprovider" | bold }}
        {{- with index .metadata.labels "topology.kubernetes.io/region" | default (index .metadata.labels "failure-domain.beta.kubernetes.io/region") }} {{ . }}{{ end }}
        {{- with index .metadata.labels "topology.kubernetes.io/zone" | default (index .metadata.labels "failure-domain.beta.kubernetes.io/zone") }}{{ . }}{{ end }}
        {{- with index .metadata.labels "node.kubernetes.io/instance" | default (index .metadata.labels "beta.kubernetes.io/instance-type") }} {{ . }}{{ end }}
        {{- with .metadata.labels.agentpool }}, agentpool:{{ . }}{{ end }}
        {{- with index .metadata.labels "kubernetes.io/role" }}, role:{{ . }}{{ end }}
    {{- end }}
  {{ "images" | bold }} {{ .status.images | len }}.
    {{- if .status.volumesInUse }} {{ "volumes" | bold }} inuse={{ .status.volumesInUse | len }}
        {{- with index .status.allocatable "attachable-volumes-azure-disk" }}/{{ . }}{{ end }}, attached={{ .status.volumesAttached | len }}
    {{- end}}
    {{- template "conditions_summary" .status.conditions }}
    {{- template "events" .events }}
{{- end -}}

